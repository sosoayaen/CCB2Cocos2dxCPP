版本3.x说明
===========
-----------

#与2.x版本的区别
　　相对2.x的版本，3.x的版本在使用时，请调用`sh gen3x.sh`命令，在参数的是使用上会有些许的差别（下文中会提到）。   
　　生成的代码更加符合**C++11**标准，输出也更加友好。增加了结果统计，比如绑定了多少变量，哪个变量名称是重复的，重复多少次。这些信息可以帮助使用者在生成代码时更清楚地了解在ccb文件中可能存在的问题。总体上来讲，3.x的版本的各种改进，都使得调用时的输入和代码的输出更加准确和有效。

##参数上的区别
　　现在默认只需要加一个ccb文件即可，默认会获取源文件的文件名作为类名和C++头文件和源代码文件的文件名。通过**-c**参数还是可以指定类名，其余的参数也是没有变化。  
　　具体的参数列表，请键入`sh gen3x.sh -h`命令查看帮助。

##配置的区别
　　现在的配置文件也随着版本的升级而加了后缀——`config3x.lua`。内部的结构也做了变化。移除了`smartMatchTypeTbl`表格，新增了`classChange3xConfig`表格，以及`defaultConfig`表。前者是用来更加精确定义一个成员变量的类名（在3.x版本下）以及对应的命名空间；后者是用来简化在命令行模式下调用参数的复杂度，其中定义了ccb源文件的默认搜索路径以及C++源文件的默认输出路径，这个配置项是全局的，**GUI**下，应该读取和写入各自默认的配置文件，这里相当于是便于命令行模式下的调用。

##匹配模式的修改
　　成员变量的绑定和生成由之前的抓取匹配绑定行，由ccb配置中的变量名中得书写规范反推出对应的类名的模式修改为直接读取源文件中的类名来映射，这样解决了两个问题：

 1. 由于变量名书写错误导致变量不能被正确绑定。
 2. 匹配类名需要注意并修改匹配项的顺序，比如`CCMenu`和`CCMenuItemImage`，如果要正确匹配，需要长的变量名放到短的前面，因为一旦有`CCMenuItemImage`出现，则会优先被`CCMenu`匹配到（前面完全符合）从而导致类名错误。

　　之前的做法是简单地模式匹配，使用`string.find`来作匹配，不使用全字符匹配的方式。这样不可能做到完全的精确，并且受变量名规范的影响，只要写错了就会导致解析失败，如果变量众多则很难发现是哪个不见了。而现在时通过读取配置文件的块数据来得到类名，无论变量名是什么都不会影响该变量的类型判断。并且由于某些类名的命名空间和之前的版本有所区别，所以也增加了命名空间的配置，默认是在`cocos2d`命名空间下，有些被移动到了`cocos2d::ui`命名空间下。

##文件输入和输出的默认配置
　　新增的`defaultConfig`表格中添加了`source_directory`和`output_directory`两个配置。前者是表示，如果在**-f**参数下，后面的ccb文件不是绝对路径时，把这个配置的目录作为ccb源文件的默认搜索路径；而后者顾名思义表示默认输出的C++头文件和源文件的路径。明显，这里是为了在命令行下使用生成工具时不用打一长串的路径。是否使用和如何使用就看个人喜好了。

##模块载入的区别
　　新增了`pluggin`文件夹，暂时现在把界面的基类继承和`TableViewEx`[^1]的扩展实现放到了`inherit.lua`和`tableviewex.lua`中。这两个的扩展都在这独立的lua文件中定义，方便之后的修改。

[^1]:`TableViewEx`是继承自`TableView`的类，它扩展了点击函数，多传入了一个`touch`的坐标，使用者能够判断点击的位置从而判断是表格单元中哪个控件被点击了，从而丰富界面的操作。

##按钮回调的建议
　　因为`cocos2d-x 3.x`中推荐使用`std::function`的方式来实现函数回调，并且增加了`lambda`函数的支持，这使得原本需要通过**C++语法技巧**来绑定的类成员回调函数的方式可以由`lambda`函数这种优美得多的方法来替代，虽然引擎还是支持原有的绑定模式，但是这里还是倾向使用新的方法来设定回调函数。而**CocosBuilder**这里显然是没有增加新回调函数模式的支持，所以这里就不推荐在界面配置中增加`MenuItem`的回调函数了，相对的，推荐统一在初始化的是否绑定并实现下回调函数，算是一个小强制性的设置吧。

--------

#吐槽
　　`cocos2d-x`不停地在改变，正在变得越来越好，越来越易用，官方也开始自己开发一些辅助的工具（如**CocosStudio**）来替代原有的三方工具。我看到了官方的努力，并且也深知做周边工具的困难，甚至在有些三方工具已经相对受众面很广（比如**CocosBuilder**，虽然现在已经变成了**SpriteBuilder**）的情况下，要去填补他们比较松散的生态链（类似与**Unity3D**那样做一个完整的生态链）的缺失环节。这些也正是我们所需要的变化，但是不得不说，现在的替代工具还是在初始阶段，有很多不趁手的地方存在，至少现在我觉得ccb还是挺好用的，虽然它不支持在`Scale9Sprite`中放子节点（呃，心塞）。希望替代产品先能达到之前产品的易用性，然后再填补生态链的缺失，也衷心希官方望能越做越好吧。

